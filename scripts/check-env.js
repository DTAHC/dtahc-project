/**
 * Script de v√©rification de l'environnement pour le d√©veloppement
 */
const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');

console.log('üîç V√©rification de l'environnement de d√©veloppement...');

// V√©rifier que le fichier .env existe
const envPath = path.join(__dirname, '../.env');
if (!fs.existsSync(envPath)) {
  console.error('‚ùå Le fichier .env n\'existe pas. Veuillez cr√©er un fichier .env √† partir de .env.example');
  process.exit(1);
}
console.log('‚úÖ Fichier .env trouv√©');

// V√©rifier que Docker est install√©
try {
  execSync('docker --version', { stdio: 'pipe' });
  console.log('‚úÖ Docker est install√©');
} catch (error) {
  console.error('‚ùå Docker n\'est pas install√© ou n\'est pas disponible dans le PATH');
  process.exit(1);
}

// V√©rifier que Docker Compose est install√©
try {
  execSync('docker compose version', { stdio: 'pipe' });
  console.log('‚úÖ Docker Compose est install√©');
} catch (error) {
  console.error('‚ùå Docker Compose n\'est pas install√© ou n\'est pas disponible dans le PATH');
  process.exit(1);
}

// V√©rifier que Node.js est install√© avec la bonne version
try {
  const nodeVersion = execSync('node --version', { stdio: 'pipe' }).toString().trim();
  console.log(`‚úÖ Node.js est install√© (${nodeVersion})`);
  
  const versionNumber = nodeVersion.replace('v', '').split('.')[0];
  if (parseInt(versionNumber) < 18) {
    console.warn('‚ö†Ô∏è La version de Node.js est inf√©rieure √† 18. Il est recommand√© d\'utiliser Node.js 18 ou sup√©rieur.');
  }
} catch (error) {
  console.error('‚ùå Node.js n\'est pas install√© ou n\'est pas disponible dans le PATH');
  process.exit(1);
}

// V√©rifier que Git est install√©
try {
  execSync('git --version', { stdio: 'pipe' });
  console.log('‚úÖ Git est install√©');
} catch (error) {
  console.error('‚ùå Git n\'est pas install√© ou n\'est pas disponible dans le PATH');
  process.exit(1);
}

// V√©rifier que les r√©pertoires n√©cessaires existent
const dirsToCheck = ['logs', 'uploads', 'public'];
dirsToCheck.forEach(dir => {
  const dirPath = path.join(__dirname, '..', dir);
  if (!fs.existsSync(dirPath)) {
    console.error(`‚ùå Le r√©pertoire "${dir}" n'existe pas. Veuillez le cr√©er.`);
    fs.mkdirSync(dirPath, { recursive: true });
    console.log(`‚úÖ R√©pertoire "${dir}" cr√©√© automatiquement`);
  } else {
    console.log(`‚úÖ R√©pertoire "${dir}" trouv√©`);
  }
});

console.log('\nüéâ Votre environnement de d√©veloppement est pr√™t!');
console.log('\nCommandes utiles:');
console.log('- npm install     : Installer les d√©pendances');
console.log('- npm run dev     : D√©marrer le serveur en mode d√©veloppement');
console.log('- npm test        : Ex√©cuter les tests');
console.log('- npm run lint    : V√©rifier le style du code');
console.log('- docker compose up -d : D√©marrer les services Docker');
console.log('- git status      : V√©rifier l\'√©tat de Git');
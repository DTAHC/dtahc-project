#!/usr/bin/env node

/**
 * Script pour v√©rifier l'environnement de d√©veloppement
 * Ex√©cuter avec: npm run check:env
 */

const { execSync } = require('child_process');
const fs = require('fs');
const path = require('path');
const chalk = require('chalk');

// Configuration requise
const requiredNodeVersion = '18.0.0';
const requiredNpmVersion = '8.0.0';

console.log(chalk.blue('üîç V√©rification de l'environnement DTAHC'));
console.log(chalk.blue('=========================================='));

let hasErrors = false;

// Fonction pour v√©rifier la version
function checkVersion(actual, required, name) {
  if (compareVersions(actual, required) < 0) {
    console.log(chalk.red(`‚ùå ${name} version ${actual} d√©tect√©e, ${required}+ requise`));
    hasErrors = true;
    return false;
  } else {
    console.log(chalk.green(`‚úÖ ${name} version ${actual} (OK)`));
    return true;
  }
}

// Comparaison simple de versions
function compareVersions(a, b) {
  const partsA = a.split('.').map(Number);
  const partsB = b.split('.').map(Number);
  
  for (let i = 0; i < Math.max(partsA.length, partsB.length); i++) {
    const verA = partsA[i] || 0;
    const verB = partsB[i] || 0;
    
    if (verA > verB) return 1;
    if (verA < verB) return -1;
  }
  
  return 0;
}

// V√©rifier Node.js
try {
  const nodeVersion = execSync('node --version').toString().trim().replace('v', '');
  checkVersion(nodeVersion, requiredNodeVersion, 'Node.js');
} catch (error) {
  console.log(chalk.red('‚ùå Node.js non d√©tect√©'));
  hasErrors = true;
}

// V√©rifier NPM
try {
  const npmVersion = execSync('npm --version').toString().trim();
  checkVersion(npmVersion, requiredNpmVersion, 'npm');
} catch (error) {
  console.log(chalk.red('‚ùå npm non d√©tect√©'));
  hasErrors = true;
}

// V√©rifier les fichiers d'environnement
console.log(chalk.blue('\nüìÅ V√©rification des fichiers'));

const backendEnvPath = path.join(__dirname, '..', 'packages', 'backend', '.env');
if (fs.existsSync(backendEnvPath)) {
  console.log(chalk.green('‚úÖ Fichier .env backend trouv√©'));
} else {
  console.log(chalk.yellow('‚ö†Ô∏è Fichier .env backend non trouv√© - veuillez le cr√©er'));
}

// V√©rifier les dossiers requis
console.log(chalk.blue('\nüìÅ V√©rification de la structure du projet'));
const requiredDirs = [
  'packages/backend',
  'packages/frontend',
  'packages/shared',
  'docker'
];

for (const dir of requiredDirs) {
  const dirPath = path.join(__dirname, '..', ...dir.split('/'));
  if (fs.existsSync(dirPath)) {
    console.log(chalk.green(`‚úÖ Dossier ${dir} trouv√©`));
  } else {
    console.log(chalk.red(`‚ùå Dossier ${dir} manquant`));
    hasErrors = true;
  }
}

// V√©rifier les d√©pendances
console.log(chalk.blue('\nüì¶ V√©rification des d√©pendances'));
try {
  execSync('npm ls --depth=0', { stdio: 'ignore' });
  console.log(chalk.green('‚úÖ D√©pendances install√©es correctement'));
} catch (error) {
  console.log(chalk.yellow('‚ö†Ô∏è Probl√®mes d√©tect√©s avec les d√©pendances, ex√©cutez npm install'));
}

// V√©rifier Docker
console.log(chalk.blue('\nüê≥ V√©rification de Docker'));
try {
  execSync('docker --version', { stdio: 'ignore' });
  console.log(chalk.green('‚úÖ Docker install√©'));
  
  execSync('docker-compose --version', { stdio: 'ignore' });
  console.log(chalk.green('‚úÖ Docker Compose install√©'));
} catch (error) {
  console.log(chalk.yellow('‚ö†Ô∏è Docker ou Docker Compose non d√©tect√© - requis pour l\'environnement de production'));
}

// V√©rifier Git
console.log(chalk.blue('\nüîÑ V√©rification de Git'));
try {
  execSync('git --version', { stdio: 'ignore' });
  console.log(chalk.green('‚úÖ Git install√©'));
  
  const isGitRepo = fs.existsSync(path.join(__dirname, '..', '.git'));
  if (isGitRepo) {
    console.log(chalk.green('‚úÖ D√©p√¥t Git initialis√©'));
  } else {
    console.log(chalk.yellow('‚ö†Ô∏è D√©p√¥t Git non initialis√© - ex√©cutez git init'));
  }
} catch (error) {
  console.log(chalk.red('‚ùå Git non d√©tect√©'));
  hasErrors = true;
}

// R√©sultat final
console.log(chalk.blue('\n=========================================='));
if (hasErrors) {
  console.log(chalk.red('‚ùå Des probl√®mes ont √©t√© d√©tect√©s dans votre environnement. Veuillez les corriger avant de continuer.'));
  process.exit(1);
} else {
  console.log(chalk.green('‚úÖ Environnement correctement configur√© ! Pr√™t pour le d√©veloppement.'));
  process.exit(0);
}
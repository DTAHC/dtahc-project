#!/usr/bin/env node

/**
 * Script pour migrer les donn√©es de l'ancien syst√®me vers le nouveau
 * √Ä ex√©cuter uniquement lors de la mise en place initiale
 */

const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');
const chalk = require('chalk');

console.log(chalk.blue('üîÑ Migration des donn√©es DTAHC'));
console.log(chalk.blue('=============================='));

// Chemin vers les r√©pertoires
const SOURCE_DIR = path.join(__dirname, '..', 'element-david');
const TARGET_DIR = path.join(__dirname, '..');

// Fonction pour copier les fichiers de r√©f√©rence
function copyReferenceFiles() {
  console.log(chalk.blue('\nüìã Copie des fichiers de r√©f√©rence...'));
  
  // V√©rifier que le r√©pertoire source existe
  if (!fs.existsSync(SOURCE_DIR)) {
    console.log(chalk.red('‚ùå R√©pertoire source non trouv√©:', SOURCE_DIR));
    return false;
  }
  
  // S'assurer que le r√©pertoire des r√©f√©rences existe
  const referencesDir = path.join(TARGET_DIR, 'references');
  if (!fs.existsSync(referencesDir)) {
    fs.mkdirSync(referencesDir, { recursive: true });
    console.log(chalk.green('‚úÖ R√©pertoire des r√©f√©rences cr√©√©:', referencesDir));
  }
  
  // Copier tous les fichiers
  let filesCopied = 0;
  try {
    const files = fs.readdirSync(SOURCE_DIR);
    for (const file of files) {
      const sourcePath = path.join(SOURCE_DIR, file);
      const targetPath = path.join(referencesDir, file);
      
      // V√©rifier si c'est un fichier
      if (fs.statSync(sourcePath).isFile()) {
        fs.copyFileSync(sourcePath, targetPath);
        filesCopied++;
        console.log(chalk.green(`‚úÖ Copi√©: ${file}`));
      }
    }
    
    console.log(chalk.green(`\n‚úÖ ${filesCopied} fichiers copi√©s avec succ√®s.`));
    return true;
  } catch (error) {
    console.log(chalk.red(`‚ùå Erreur lors de la copie des fichiers:`, error.message));
    return false;
  }
}

// Fonction pour cr√©er les exemples de r√©pertoires et fichiers
function createExampleStructure() {
  console.log(chalk.blue('\nüìÅ Cr√©ation des exemples de structure...'));
  
  const examples = [
    'examples/clients',
    'examples/documents',
    'examples/templates/email',
    'examples/templates/pdf',
  ];
  
  for (const dir of examples) {
    const dirPath = path.join(TARGET_DIR, dir);
    if (!fs.existsSync(dirPath)) {
      fs.mkdirSync(dirPath, { recursive: true });
      console.log(chalk.green(`‚úÖ Cr√©√©: ${dir}`));
    }
  }
  
  // Cr√©er quelques fichiers d'exemple
  const exampleFiles = [
    { path: 'examples/clients/README.md', content: '# Exemples de clients\n\nCe r√©pertoire contient des exemples de donn√©es clients pour le d√©veloppement.' },
    { path: 'examples/documents/README.md', content: '# Exemples de documents\n\nCe r√©pertoire contient des exemples de documents pour le d√©veloppement.' },
    { path: 'examples/templates/email/README.md', content: '# Templates d\'email\n\nCe r√©pertoire contient des templates d\'email pour les communications.' },
    { path: 'examples/templates/pdf/README.md', content: '# Templates PDF\n\nCe r√©pertoire contient des templates PDF pour les documents g√©n√©r√©s.' },
  ];
  
  for (const file of exampleFiles) {
    const filePath = path.join(TARGET_DIR, file.path);
    fs.writeFileSync(filePath, file.content);
    console.log(chalk.green(`‚úÖ Cr√©√©: ${file.path}`));
  }
  
  return true;
}

// Ex√©cution principale
async function main() {
  let success = true;
  
  success = copyReferenceFiles() && success;
  success = createExampleStructure() && success;
  
  console.log(chalk.blue('\n=============================='));
  if (success) {
    console.log(chalk.green('‚úÖ Migration des donn√©es termin√©e avec succ√®s !'));
    return 0;
  } else {
    console.log(chalk.red('‚ùå Des erreurs se sont produites pendant la migration.'));
    return 1;
  }
}

// Ex√©cuter le script
main().then(
  (code) => process.exit(code),
  (err) => {
    console.error(chalk.red('Erreur non g√©r√©e:'), err);
    process.exit(1);
  }
);